{
  "resolvers" : [ ],
  "graph" : {
    "metainfo" : {
      "cluster" : "local",
      "id" : "id",
      "memory" : 1,
      "mode" : "batch",
      "processors" : 1,
      "language" : "scala",
      "interimMode" : "full",
      "udfs" : {
        "language" : "scala",
        "udfs" : [ ]
      },
      "udafs" : {
        "language" : "scala",
        "code" : "package udfs\n\nimport org.apache.spark.sql.expressions._\nimport org.apache.spark.sql.types._\nimport org.apache.spark.sql._\n\n/**\n  * Here you can define your custom aggregate functions.\n  *\n  * Make sure to register your `udafs` in the register_udafs function below.\n  *\n  * Example:\n  *\n  * object GeometricMean extends UserDefinedAggregateFunction {\n  *   // This is the input fields for your aggregate function.\n  *   override def inputSchema: org.apache.spark.sql.types.StructType =\n  *     StructType(StructField(\"value\", DoubleType) :: Nil)\n  *\n  *   // This is the internal fields you keep for computing your aggregate.\n  *   override def bufferSchema: StructType = StructType(\n  *     StructField(\"count\", LongType) ::\n  *     StructField(\"product\", DoubleType) :: Nil\n  *   )\n  *\n  *   // This is the output type of your aggregatation function.\n  *   override def dataType: DataType = DoubleType\n  *\n  *   override def deterministic: Boolean = true\n  *\n  *   // This is the initial value for your buffer schema.\n  *   override def initialize(buffer: MutableAggregationBuffer): Unit = {\n  *     buffer(0) = 0L\n  *     buffer(1) = 1.0\n  *   }\n  *\n  *   // This is how to update your buffer schema given an input.\n  *   override def update(buffer: MutableAggregationBuffer, input: Row): Unit = {\n  *     buffer(0) = buffer.getAs[Long](0) + 1\n  *     buffer(1) = buffer.getAs[Double](1) * input.getAs[Double](0)\n  *   }\n  *\n  *   // This is how to merge two objects with the bufferSchema type.\n  *   override def merge(buffer1: MutableAggregationBuffer, buffer2: Row): Unit = {\n  *     buffer1(0) = buffer1.getAs[Long](0) + buffer2.getAs[Long](0)\n  *     buffer1(1) = buffer1.getAs[Double](1) * buffer2.getAs[Double](1)\n  *   }\n  *\n  *   // This is where you output the final value, given the final value of your bufferSchema.\n  *   override def evaluate(buffer: Row): Any = {\n  *     math.pow(buffer.getDouble(1), 1.toDouble / buffer.getLong(0))\n  *   }\n  * }\n  *\n  */\n\n\nobject UDAFs {\n  /**\n    * Registers UDAFs with Spark SQL\n    */\n  def registerUDAFs(spark: SparkSession): Unit = {\n    /**\n      * Example:\n      *\n      * spark.udf.register(\"gm\", GeometricMean)\n      *\n      */\n\n\n  }\n}\n"
      },
      "sparkOptions" : {
        "options" : {
          "spark.default.parallelism" : "4",
          "spark.app.name" : "CustomerAmountsWorkflow",
          "spark.sql.catalogImplementation" : "hive"
        }
      }
    },
    "connections" : [ {
      "metadata" : {
        "route" : "e1"
      },
      "src" : {
        "port" : "out",
        "process" : "OrdersDatasetInput"
      },
      "tgt" : {
        "port" : "left",
        "process" : "My_Join_Component"
      }
    }, {
      "metadata" : {
        "route" : "e2"
      },
      "src" : {
        "port" : "out",
        "process" : "CustomersDatasetInput"
      },
      "tgt" : {
        "port" : "right",
        "process" : "My_Join_Component"
      }
    }, {
      "metadata" : {
        "route" : "e3"
      },
      "src" : {
        "port" : "out",
        "process" : "My_Join_Component"
      },
      "tgt" : {
        "port" : "in",
        "process" : "CustomerOrdersDatasetOutput"
      }
    } ],
    "groups" : [ ],
    "inports" : { },
    "outports" : { },
    "processes" : {
      "CustomerOrdersDatasetOutput" : {
        "component" : "Target",
        "metadata" : {
          "label" : "CustomerOrdersDatasetOutput",
          "x" : 1141,
          "y" : 108
        },
        "ports" : {
          "inputs" : [ "in" ],
          "outputs" : [ ]
        },
        "properties" : {
          "src_desc" : "",
          "phase" : 0,
          "ramp" : 0,
          "detailedStats" : false,
          "version" : 0,
          "id" : "17",
          "udf_definitions" : [ ],
          "limit" : 0
        },
        "ignore" : false
      },
      "OrdersDatasetInput" : {
        "component" : "Source",
        "metadata" : {
          "label" : "OrdersDatasetInput",
          "x" : 5,
          "y" : 42
        },
        "ports" : {
          "inputs" : [ ],
          "outputs" : [ "out" ]
        },
        "properties" : {
          "src_desc" : "",
          "phase" : 0,
          "ramp" : 0,
          "detailedStats" : false,
          "version" : 0,
          "id" : "16",
          "udf_definitions" : [ ],
          "limit" : 0
        },
        "ignore" : false
      },
      "My_Join_Component" : {
        "component" : "Join",
        "metadata" : {
          "label" : "My Join Component",
          "x" : 206,
          "y" : 108
        },
        "ports" : {
          "inputs" : [ "left", "right" ],
          "outputs" : [ "out" ]
        },
        "properties" : {
          "src_desc" : "",
          "phase" : 0,
          "joinCondition" : {
            "format" : "scala",
            "expr" : "col(\"left.customer_id\") === col(\"right.customer_id\")"
          },
          "selectColumns" : [ {
            "targetCol" : "account_open_date",
            "isLeftTableCol" : false,
            "expression" : {
              "format" : "scala",
              "expr" : "col(\"right.account_open_date\")"
            }
          }, {
            "targetCol" : "order_id",
            "isLeftTableCol" : true,
            "expression" : {
              "format" : "scala",
              "expr" : "col(\"left.order_id\")"
            }
          }, {
            "targetCol" : "customer_id",
            "isLeftTableCol" : true,
            "expression" : {
              "format" : "scala",
              "expr" : "col(\"left.customer_id\")"
            }
          }, {
            "targetCol" : "amount",
            "isLeftTableCol" : true,
            "expression" : {
              "format" : "scala",
              "expr" : "col(\"left.amount\")"
            }
          }, {
            "targetCol" : "order_status",
            "isLeftTableCol" : true,
            "expression" : {
              "format" : "scala",
              "expr" : "col(\"left.order_status\")"
            }
          }, {
            "targetCol" : "first_name",
            "isLeftTableCol" : false,
            "expression" : {
              "format" : "scala",
              "expr" : "col(\"right.first_name\")"
            }
          }, {
            "targetCol" : "last_name",
            "isLeftTableCol" : false,
            "expression" : {
              "format" : "scala",
              "expr" : "col(\"right.last_name\")"
            }
          }, {
            "targetCol" : "phone",
            "isLeftTableCol" : false,
            "expression" : {
              "format" : "scala",
              "expr" : "col(\"right.phone\")"
            }
          }, {
            "targetCol" : "email",
            "isLeftTableCol" : false,
            "expression" : {
              "format" : "scala",
              "expr" : "col(\"right.email\")"
            }
          }, {
            "targetCol" : "country_code",
            "isLeftTableCol" : false,
            "expression" : {
              "format" : "scala",
              "expr" : "col(\"right.country_code\")"
            }
          }, {
            "targetCol" : "account_flags",
            "isLeftTableCol" : false,
            "expression" : {
              "format" : "scala",
              "expr" : "col(\"right.account_flags\")"
            }
          } ],
          "ramp" : 0,
          "detailedStats" : false,
          "udf_definitions" : [ ],
          "joinType" : "inner",
          "limit" : 0
        },
        "ignore" : false
      },
      "CustomersDatasetInput" : {
        "component" : "Source",
        "metadata" : {
          "label" : "CustomersDatasetInput",
          "x" : 7,
          "y" : 154
        },
        "ports" : {
          "inputs" : [ ],
          "outputs" : [ "out" ]
        },
        "properties" : {
          "src_desc" : "",
          "phase" : 0,
          "ramp" : 0,
          "detailedStats" : false,
          "version" : 0,
          "id" : "15",
          "udf_definitions" : [ ],
          "limit" : 0
        },
        "ignore" : false
      }
    }
  }
}